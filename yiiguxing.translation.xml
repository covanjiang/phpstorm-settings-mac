<application>
  <component name="AppStorage">
    <histories>
      <item value="Attaching DOM nodes from multiple documents in the same crawler is forbidden." />
      <item value="Channel" />
      <item value="Throws &lt;a href=&quot;http:php.netmanualzhclass.jsonexception.php&quot; class=&quot;classname&quot;&gt;JsonException&lt;a&gt; if an error occurs instead of setting the global error state that is retrieved with &lt;span class=&quot;function&quot;&gt;{@link json_last_error()}&lt;span&gt; and &lt;span class=&quot;function&quot;&gt;{@link json_last_error_msg()}&lt;span&gt;. &lt;strong&gt;&lt;code&gt;JSON_PARTIAL_OUTPUT_ON_ERROR&lt;code&gt;&lt;strong&gt; takes precedence over &lt;strong&gt;&lt;code&gt;JSON_THROW_ON_ERROR&lt;code&gt;&lt;strong&gt;. Available as of PHP 7.3.0." />
      <item value="[EA] New value type (int) is not matching the resolved parameter type and might introduce types-related false-positives." />
      <item value="TW Top Ten Has Been Copied at some time in the past" />
      <item value="TW Top Ten Has Been Copied!" />
      <item value="TW Top Ten Has Been Completed at once" />
      <item value="SQLSTATE[HY000]: General error: 2014 Cannot execute queries while other unbuffered queries are active. Consider using PDOStatement::fetchAll()." />
      <item value="Alternatively, if your code is only ever going to run against mysql, you may enable query buffering by setting the PDO::MYSQL_ATTR_USE_BUFFERED_QUERY attribute." />
      <item value="deprecated" />
      <item value="Echo exposes an expressive API for subscribing to channels and listening for events that are broadcast by Laravel. Echo and event broadcasting allows your team to easily build robust real-time web applications." />
      <item value="We'll load the axios HTTP library which allows us to easily issue requests to our Laravel back-end. This library automatically handles sending the CSRF token as a header based on the value of the &quot;XSRF&quot; token cookie." />
      <item value="Redundant default attribute value assignment" />
      <item value="We call this approach &quot;line based&quot;. We believe that Parsedown is the first Markdown parser to use it. Since the release of Parsedown, other developers have used the same approach to develop other Markdown parsers in PHP and in other languages." />
      <item value="It tries to read Markdown like a human. First, it looks at the lines. Itâ€™s interested in how the lines start. This helps it recognise blocks. It knows, for example, that if a line starts with a `-` then perhaps it belongs to a list. Once it recognises the blocks, it continues to the content. As it reads, it watches out for special characters. This helps it recognise inline elements (or inlines)." />
      <item value="Reports union type declarations that contain redundant types, for example, a union type that contains both the class alias and the original class." />
      <item value="Reports elements that have &amp; in declaration and not effectively used as references." />
      <item value="Checks that variables are declared explicitly with a var statement. The validation works in JavaScript, html or jsp files." />
      <item value="A list of the inputs that are never flashed for validation exceptions." />
      <item value="Apk common PUBLISHED" />
      <item value="Add conditions to a given field based on a Closure." />
      <item value="The validation presence verifier is responsible for determining the existence of values in a given data collection which is typically a relational database or other persistent data stores. It is used to check for &quot;uniqueness&quot; as well." />
      <item value="Register the database presence verifier." />
      <item value="If an implementation of UserInterface was returned, we'll ask the provider to validate the user against the given credentials, and if they are in fact valid we'll log the users into the application and return true." />
      <item value="Retrieve" />
      <item value="Determine if the request has a URI that should pass through verification." />
      <item value="If we actually found models we will also eager load any relationships that have been specified as needing to be eager loaded, which will solve the n+1 query issue for the developers to avoid running a lot of queries." />
      <item value="First we will check for the presence of a mutator for the set operation which simply lets the developers tweak the attribute as it is set on the model, such as &quot;json_encoding&quot; an listing of data for storage." />
      <item value="If the model is brand new" />
      <item value="This is the subdomain where Telescope will be accessible from. If the | setting is null, Telescope will reside under the same domain as the | application. Otherwise, this value will be used as the subdomain." />
      <item value="Now we are finally ready to attach the new records. Note that we'll disable // touching until after the entire operation is complete so we don't fire a // ton of touch operations until we are totally done syncing the records." />
      <item value="Next, we will take the differences of the currents and given IDs and detach // all of the entities that exist in the &quot;current&quot; array but are not in the // array of the new IDs given to the method which will complete the sync." />
      <item value="First we need to attach any of the associated models that are not currently // in this joining table. We'll spin through the given IDs, checking to see // if they exist in the array of current ones, and if not we will insert." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="32" />
        <entry key="ENGLISH" value="33" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1619316859286" />
  </component>
</application>