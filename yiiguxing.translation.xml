<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="444" />
    <option name="newTranslationDialogWidth" value="750" />
    <option name="newTranslationDialogX" value="742" />
    <option name="newTranslationDialogY" value="313" />
    <histories>
      <item value="On each chunk result set, we will pass them to the callback and then let the developer take care of everything within the callback, which allows us to keep the memory low for spinning through large result sets for working." />
      <item value="Execute a callback over each item while chunking by ID." />
      <item value="Get an array with all orders with a given column removed." />
      <item value="Reports the trait method use rules that are resolved to methods from a different containing class rather than the one specified in the use declaration." />
      <item value="Reports the [Pure] annotations used on functions that may produce side effects." />
      <item value="Reports the values in assignment and comparison expressions that should be replaced with one of the expected values (that is, the values specified via the [ExpectedValues] attribute)." />
      <item value="Reports the use statements with an unnecessary leading \. For namespaced names (fully qualified namespace names containing a namespace separator, such as Foo\Bar as opposed to global names that do not, such as FooBar), the leading backslash is unnecessary and not recommended, as import names must be fully qualified and are not processed relative to the current namespace. See Using namespaces: AliasingImporting (php.net) for details." />
      <item value="Next, we will format the path of the file and store the file using a stream since they provide better performance than alternatives. Once we write the file this stream will get closed automatically by us so the developer doesn't have to." />
      <item value="haystack" />
      <item value="Case-insensitively aggregate all of the headers." />
      <item value="Here is where you can register API routes for your application. These | routes are loaded by the RouteServiceProvider within a group which | is assigned the &quot;api&quot; middleware group. Enjoy building your API!" />
      <item value="If an array is passed as the key, we will assume you want to set an array of values." />
      <item value="Identity" />
      <item value="This option controls the default Identity. You may change these defaults | as required, but they're a perfect start for most applications." />
      <item value="Data can be retrieved from the model object using the get() method of the model (e.g., `\result-&gt;get(\key)`) or &quot;accessing the result like an associative array (e.g. `\result['key']`). You can also execute JMESPath expressions on the result data using the search() method." />
      <item value="Guess MIME Type based on the path of the file and it's content." />
      <item value="[EA] 'registerValidationFactory' method can be dropped, as it identical to parent's one." />
      <item value="Set to true to send requests to an S3 path style' . ' endpoint by default.' . ' Can be enabled or disabled on individual operations by setting" />
      <item value="Set to true to send requests to a hardcoded bucket endpoint rather than create an endpoint as a result of injecting the bucket into the URL. This option is useful for interacting with CNAME endpoints" />
      <item value="Returns the URL to an object identified by its bucket and key. The URL returned by this method is not signed nor does it ensure that the bucket and key given to the method exist. If you need a signed URL, then use the {@see \Aws\S3\S3Client::createPresignedRequest} method and get the URI of the signed request. @param string bucket The name of the bucket where the object is located @param string key The key of the object @return string The URL to the object" />
      <item value="This condition execution costs less than the previous one." />
      <item value="Once we save the related model, we need to attach it to the base model via through intermediate table so we'll use the existing &quot;attach&quot; method to accomplish this which will insert the record and any more attributes." />
      <item value="prefix" />
      <item value="Attaching DOM nodes from multiple documents in the same crawler is forbidden." />
      <item value="Channel" />
      <item value="Throws &lt;a href=&quot;http:php.netmanualzhclass.jsonexception.php&quot; class=&quot;classname&quot;&gt;JsonException&lt;a&gt; if an error occurs instead of setting the global error state that is retrieved with &lt;span class=&quot;function&quot;&gt;{@link json_last_error()}&lt;span&gt; and &lt;span class=&quot;function&quot;&gt;{@link json_last_error_msg()}&lt;span&gt;. &lt;strong&gt;&lt;code&gt;JSON_PARTIAL_OUTPUT_ON_ERROR&lt;code&gt;&lt;strong&gt; takes precedence over &lt;strong&gt;&lt;code&gt;JSON_THROW_ON_ERROR&lt;code&gt;&lt;strong&gt;. Available as of PHP 7.3.0." />
      <item value="[EA] New value type (int) is not matching the resolved parameter type and might introduce types-related false-positives." />
      <item value="TW Top Ten Has Been Copied at some time in the past" />
      <item value="TW Top Ten Has Been Copied!" />
      <item value="TW Top Ten Has Been Completed at once" />
      <item value="SQLSTATE[HY000]: General error: 2014 Cannot execute queries while other unbuffered queries are active. Consider using PDOStatement::fetchAll()." />
      <item value="Alternatively, if your code is only ever going to run against mysql, you may enable query buffering by setting the PDO::MYSQL_ATTR_USE_BUFFERED_QUERY attribute." />
      <item value="deprecated" />
      <item value="Echo exposes an expressive API for subscribing to channels and listening for events that are broadcast by Laravel. Echo and event broadcasting allows your team to easily build robust real-time web applications." />
      <item value="We'll load the axios HTTP library which allows us to easily issue requests to our Laravel back-end. This library automatically handles sending the CSRF token as a header based on the value of the &quot;XSRF&quot; token cookie." />
      <item value="Redundant default attribute value assignment" />
      <item value="We call this approach &quot;line based&quot;. We believe that Parsedown is the first Markdown parser to use it. Since the release of Parsedown, other developers have used the same approach to develop other Markdown parsers in PHP and in other languages." />
      <item value="It tries to read Markdown like a human. First, it looks at the lines. Itâ€™s interested in how the lines start. This helps it recognise blocks. It knows, for example, that if a line starts with a `-` then perhaps it belongs to a list. Once it recognises the blocks, it continues to the content. As it reads, it watches out for special characters. This helps it recognise inline elements (or inlines)." />
      <item value="Reports union type declarations that contain redundant types, for example, a union type that contains both the class alias and the original class." />
      <item value="Reports elements that have &amp; in declaration and not effectively used as references." />
      <item value="Checks that variables are declared explicitly with a var statement. The validation works in JavaScript, html or jsp files." />
      <item value="A list of the inputs that are never flashed for validation exceptions." />
      <item value="Apk common PUBLISHED" />
      <item value="Add conditions to a given field based on a Closure." />
      <item value="The validation presence verifier is responsible for determining the existence of values in a given data collection which is typically a relational database or other persistent data stores. It is used to check for &quot;uniqueness&quot; as well." />
      <item value="Register the database presence verifier." />
      <item value="If an implementation of UserInterface was returned, we'll ask the provider to validate the user against the given credentials, and if they are in fact valid we'll log the users into the application and return true." />
      <item value="Retrieve" />
      <item value="Determine if the request has a URI that should pass through verification." />
      <item value="If we actually found models we will also eager load any relationships that have been specified as needing to be eager loaded, which will solve the n+1 query issue for the developers to avoid running a lot of queries." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="46" />
        <entry key="ENGLISH" value="46" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1622691362264" />
  </component>
</application>