<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="444" />
    <option name="newTranslationDialogWidth" value="750" />
    <option name="newTranslationDialogX" value="742" />
    <option name="newTranslationDialogY" value="313" />
    <histories>
      <item value="Wait for the given text to be visible inside the given selector." />
      <item value="perhaps we are dealing with dead code here" />
      <item value="Get all window handles available to the current session." />
      <item value="[Experimental] Construct the RemoteWebDriver by an existing session. This constructor can boost the performance a lot by reusing the same browser for the whole test suite. You cannot pass the desired capabilities because the session was created before." />
      <item value="Returns a list of the currently active sessions." />
      <item value="Capabilities" />
      <item value="Create instance based on response to NEW_SESSION command. Also detect W3COSS dialect and setup the driverexecutor accordingly." />
      <item value="Construct the RemoteWebDriver by a desired capabilities." />
      <item value="To be removed in the future. Executor should be passed in the constructor." />
      <item value="Performs a check between the timeout definition and the time the process started. In case you run a background process (with the start method), you should trigger this method regularly to ensure the process timeout @throws ProcessTimedOutException In case the timeout was reached" />
      <item value="Updates the status of the process, reads pipes." />
      <item value="tarts the process and returns after writing the input to STDIN. This method blocks until all STDIN data is sent to the process then it returns while the process runs in the background. The termination of the process can be awaited with wait(). The callback receives the type of output (out or err) and some bytes from the output in real-time while writing the standard input to the process. It allows to have feedback from the independent process during execution." />
      <item value="Get the callback which resolves the default user to authenticate." />
      <item value="Capture failure screenshots for each browser." />
      <item value="Store the source code for the given browsers (if necessary)" />
      <item value="This method is not covered by the backward compatibility promise for PHPUnit" />
      <item value="Store the console output for the given browsers." />
      <item value="If the URL does not start with http or https, then we will prepend the base URL onto the URL and navigate to the URL. This will actually navigate to the URL in the browser. Then we will be ready to make assertions, etc." />
      <item value="Determine the application's base URL." />
      <item value="Return the default user to authenticate." />
      <item value="Determine if the tests are running within Laravel Sail." />
      <item value="Determine whether the Dusk command has disabled headless mode." />
      <item value="Authentication settings for all admin pages. Include an authentication | guard and a user provider setting of authentication driver. | | You can specify a controller for `login` `logout` and other auth routes." />
      <item value="The installation directory of the controller and routing configuration | files of the administration page. The default is `appAdmin`, which must | be set before running `artisan admin::install` to take effect." />
      <item value="The routing configuration of the admin page, including the path prefix, | the controller namespace, and the default middleware. If you want to | access through the root path, just set the prefix to empty string." />
      <item value="The logo of all admin pages. You can also set it as an image by using a | `img` tag, eg '&lt;img src=&quot;http:logo-url&quot; alt=&quot;Admin logo&quot;&gt;'." />
      <item value="This value is the name of dcat-admin, This setting is displayed on the | login page." />
      <item value="If this attribute contains a JSON -&gt;, we'll set the proper value in the attribute's underlying array. This takes care of properly nesting an attribute in the array's value in the case of deeply nested items." />
      <item value="If an attribute is listed as a &quot;date&quot;, we'll convert it from a DateTime instance into a form proper for storage on the database tables using the connection grammar's date format. We will auto set the values." />
      <item value="This file is where you may define all of your Closure based console | commands. Each Closure is bound to a command instance allowing a | simple approach to interacting with each command's IO methods." />
      <item value="Here you may register all of the event broadcasting channels that your | application supports. The given channel authorization callbacks are | used to check if an authenticated user can listen to the channel." />
      <item value="get SimleXmlElement created from AndroidManifest.xml" />
      <item value="the anount of bits to shift back and forth, so that we get the correct signage" />
      <item value="Iterate through all chunks" />
      <item value="Only the first string pool is processed." />
      <item value="Reads 4 bytes from the stream and returns little-endian ordered binary data as signed 32-bit integer." />
      <item value="Reads 2 bytes from the stream and returns little-endian ordered binary data as signed 16-bit integer." />
      <item value="LITTLE ENDIAN ORDER" />
      <item value="Returns the current machine endian order." />
      <item value="&quot;8.38.8.83&quot;, &quot;8.8.18.81&quot;, &quot;8.8.8.83&quot;, &quot;8.8.8.82&quot;, &quot;1.2.3.41&quot;, &quot;1.2.3.4&quot;, &quot;11.11.11.11&quot;, &quot;11.1.1.11&quot;, &quot;21.2.2.2&quot;, &quot;11.1.1.1&quot;, &quot;101.37.18.32&quot;, &quot;2600:3c00:0000:0000:0000:0000:0000:000064&quot;, &quot;2041:0db8:0100:0000:0000:0000:0000:000064&quot;, &quot;2001:0db8:001a:1111:0000:0000:0000:000064&quot;, &quot;40.77.0.016&quot;, &quot;66.249.0.016&quot;, &quot;21.31.0.016&quot;," />
      <item value="Get the count of the total records for the paginator." />
      <item value="Get a base query builder instance." />
      <item value="Manually indicate that the paginator does have more pages." />
      <item value="Next we will set the limit and offset for this query so that when we get the results we get the proper section of results. Then, we'll create the full paginator instances for these results with the given page and per page." />
      <item value="Now we'll try to update an existing pivot record with the attributes that were given to the method. If the model is actually updated we will add it to the list of updated pivot records so we return them back out to the consumer." />
      <item value="If the ID is not in the list of existing pivot IDs, we will insert a new pivot record, otherwise, we will just update this existing record on this joining table, so that the developers will easily update these records pain free." />
      <item value="Each existing model is detached, and non existing ones are attached." />
      <item value="The class name of the custom pivot model to use for the relationship." />
      <item value="Next, we will take the differences of the currents and given IDs and detach all of the entities that exist in the &quot;current&quot; array but are not in the array of the new IDs given to the method which will complete the sync." />
      <item value="First we need to attach any of the associated models that are not currently in this joining table. We'll spin through the given IDs, checking to see if they exist in the array of current ones, and if not we will insert." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="101" />
        <entry key="ENGLISH" value="102" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1626245124372" />
  </component>
</application>